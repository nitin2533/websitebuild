
trigger:
  branches:
    include:
      - feature/*
      - main
pr:
  branches:
    include:
      - main
pool:
  name: Desktop   # make sure this is a valid agent pool in your DevOps org
variables:
  workDir: '$(System.DefaultWorkingDirectory)/'
stages:
# -------------------
# Stage 1: PLAN + Manual Validation
# -------------------
- stage: Terraform_Plan
  displayName: "Terraform Plan Stage"
  jobs:
  - job: Plan
    displayName: "Terraform Plan Job"
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'
    - task: TerraformTask@5
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(workDir)'
        backendServiceArm: 'nitinsubscription'
        backendAzureRmStorageAccountName: 'websitestorage111'
        backendAzureRmContainerName: 'websitecon'
        backendAzureRmKey: 'terraform.tfstate'
    - task: TerraformTask@5
      displayName: 'Terraform Validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(workDir)'
    - task: TerraformTask@5
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(workDir)'
        environmentServiceNameAzureRM: 'nitinsubscription'
  - job: ManualApproval
    displayName: "Manual Validation Before Apply"
    dependsOn: Plan
    pool: server
    steps:
    - task: ManualValidation@1
      inputs:
        notifyUsers: 'nitinchaudhary2425@gmail.com'
        instructions: 'Please review the Terraform plan output and approve to proceed with Apply stage.'
        onTimeout: 'reject'
        timeout: 43200 # 12 hours
# -------------------
# Stage 2: APPLY
# -------------------
- stage: Terraform_Apply
  displayName: "Terraform Apply Stage"
  dependsOn: Terraform_Plan
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - job: ApplyJob
    displayName: "Terraform Apply Job"
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'
    - task: TerraformTask@5
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(workDir)'
        backendServiceArm: 'nitinsubscription'
        backendAzureRmStorageAccountName: 'websitestorage111'
        backendAzureRmContainerName: 'websitecon'
        backendAzureRmKey: 'terraform.tfstate'
    - task: TerraformTask@5
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(workDir)'
        environmentServiceNameAzureRM: 'nitinsubscription'
# task: TerraformTask@5
# displayName: 'Terraform Destroy'
# inputs:
#   provider: 'azurerm'
#   command: 'destroy'
#   workingDirectory: '$(workDir)'
#   environmentServiceNameAzureRM: 'nitinsubscription'
#   commandOptions: '-auto-approve'